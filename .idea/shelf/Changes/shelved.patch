Index: app/src/main/java/com/example/afya/presentation/viewmodel/AddPostViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.afya.presentation.viewmodel\n\nimport androidx.lifecycle.ViewModel\nimport com.example.afya.domain.usecase.AddPostUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport javax.inject.Inject\n\n\n@HiltViewModel\nclass AddPostViewModel @Inject constructor(private val addPostUseCase: AddPostUseCase) : ViewModel() {\n\n    //TODO: complete you logic\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/afya/presentation/viewmodel/AddPostViewModel.kt b/app/src/main/java/com/example/afya/presentation/viewmodel/AddPostViewModel.kt
--- a/app/src/main/java/com/example/afya/presentation/viewmodel/AddPostViewModel.kt	(revision ad99e9b9b103e8db0ff19c252298f9ca382e5a50)
+++ b/app/src/main/java/com/example/afya/presentation/viewmodel/AddPostViewModel.kt	(date 1741906249832)
@@ -7,7 +7,51 @@
 
 
 @HiltViewModel
-class AddPostViewModel @Inject constructor(private val addPostUseCase: AddPostUseCase) : ViewModel() {
+class AddPostViewModel @Inject constructor(
+    private val addPostUseCase: AddPostUseCase
+) : ViewModel() {
+
+    private val _state = MutableStateFlow(AddPostState())
+    val state: StateFlow<AddPostState> = _state
 
-    //TODO: complete you logic
-}
\ No newline at end of file
+    fun onEvent(event: AddPostEvent) {
+        when (event) {
+            is AddPostEvent.TitleChanged -> _state.value = _state.value.copy(title = event.title)
+            is AddPostEvent.DrugNameChanged -> _state.value = _state.value.copy(drugName = event.drugName)
+            is AddPostEvent.ContentChanged -> _state.value = _state.value.copy(content = event.content)
+            is AddPostEvent.LocationChanged -> _state.value = _state.value.copy(location = event.location)
+            is AddPostEvent.ImageUrlChanged -> _state.value = _state.value.copy(imageUrl = event.url)
+            is AddPostEvent.PostTypeSelected -> _state.value = _state.value.copy(postType = event.postType)
+            AddPostEvent.Submit -> submitPost()
+        }
+    }
+
+    private fun submitPost() {
+        val currentState = _state.value
+        if (currentState.title.isBlank() || currentState.drugName.isBlank() ||
+            currentState.content.isBlank() || currentState.location.isBlank()
+        ) {
+            _state.value = _state.value.copy(error = "جميع الحقول مطلوبة")
+            return
+        }
+
+        _state.value = _state.value.copy(isLoading = true, error = null)
+
+        viewModelScope.launch {
+            val result = addPostUseCase.execute(
+                title = currentState.title,
+                drugName = currentState.drugName,
+                content = currentState.content,
+                location = currentState.location,
+                imageUrl = currentState.imageUrl,
+                postType = currentState.postType
+            )
+
+            _state.value = if (result.isSuccess) {
+                AddPostState(isSuccess = true)
+            } else {
+                _state.value.copy(isLoading = false, error = result.errorMessage)
+            }
+        }
+    }
+}
Index: app/src/main/java/com/example/afya/presentation/view/AddPostScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.afya.presentation.view\n\n\n//TODO: add add post screen
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/afya/presentation/view/AddPostScreen.kt b/app/src/main/java/com/example/afya/presentation/view/AddPostScreen.kt
--- a/app/src/main/java/com/example/afya/presentation/view/AddPostScreen.kt	(revision ad99e9b9b103e8db0ff19c252298f9ca382e5a50)
+++ b/app/src/main/java/com/example/afya/presentation/view/AddPostScreen.kt	(date 1741906664048)
@@ -1,4 +1,503 @@
-package com.example.afya.presentation.view
+package com.example.afya.ui.screens
+
+import android.net.Uri
+import androidx.activity.compose.rememberLauncherForActivityResult
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.*
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.ArrowDropDown
+import androidx.compose.material3.*
+import androidx.compose.runtime.*
+import androidx.compose.ui.Alignment
+import androidx.hilt.navigation.compose.hiltViewModel
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import androidx.navigation.NavController
+import coil.compose.rememberImagePainter
+import com.example.afya.data.model.PostType
+import com.example.afya.presentation.AddPostViewModel
+import com.example.afya.presentation.AddPostEvent
+import java.text.SimpleDateFormat
+import java.util.Locale
+import androidx.compose.material.icons.filled.CheckCircle
+import androidx.compose.ui.graphics.RectangleShape
+import kotlinx.coroutines.delay
+import java.text.ParseException
+
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun AddPostScreen(
+    navController: NavController,
+    viewModel: AddPostViewModel = hiltViewModel()
+) {
+    var title by remember { mutableStateOf("") }
+    var content by remember { mutableStateOf("") }
+    var drugName by remember { mutableStateOf("") }
+    var location by remember { mutableStateOf("") }
+    var imageUri by remember { mutableStateOf<Uri?>(null) }
+    var postType by remember { mutableStateOf<PostType?>(null) }
+    var expanded by remember { mutableStateOf(false) }
+    var showError by remember { mutableStateOf(false) }
+    var showSuccessMessage by remember { mutableStateOf(false) }
+
+    // استخدام ActivityResultContracts لفتح مستعرض الملفات
+    val pickImageLauncher = rememberLauncherForActivityResult(
+        contract = ActivityResultContracts.GetContent(),
+        onResult = { uri ->
+            imageUri = uri
+            viewModel.onEvent(AddPostEvent.ImageUrpackage com.example.afya.ui.screens
+
+                    import android.net.Uri
+                    import androidx.activity.compose.rememberLauncherForActivityResult
+                    import androidx.activity.result.contract.ActivityResultContracts
+                    import androidx.compose.foundation.Image
+                    import androidx.compose.foundation.clickable
+                    import androidx.compose.foundation.layout.*
+                    import androidx.compose.material.icons.Icons
+                    import androidx.compose.material.icons.filled.ArrowDropDown
+                    import androidx.compose.material3.*
+                    import androidx.compose.runtime.*
+                    import androidx.compose.ui.Alignment
+                    import androidx.hilt.navigation.compose.hiltViewModel
+                    import androidx.compose.ui.Modifier
+                    import androidx.compose.ui.draw.clip
+                    import androidx.compose.ui.graphics.Color
+                    import androidx.compose.ui.unit.dp
+                    import androidx.compose.ui.unit.sp
+                    import androidx.navigation.NavController
+                    import coil.compose.rememberImagePainter
+                    import com.example.afya.data.model.PostType
+                    import com.example.afya.presentation.AddPostViewModel
+                    import com.example.afya.presentation.AddPostEvent
+                    import java.text.SimpleDateFormat
+                    import java.util.Locale
+                    import androidx.compose.material.icons.filled.CheckCircle
+                    import androidx.compose.ui.graphics.RectangleShape
+                    import kotlinx.coroutines.delay
+                    import java.text.ParseException
+
+
+                    @OptIn(ExperimentalMaterial3Api::class)
+                    @Composable
+                    fun AddPostScreen(
+                        navController: NavController,
+                        viewModel: AddPostViewModel = hiltViewModel()
+                    ) {
+                        var title by remember { mutableStateOf("") }
+                        var content by remember { mutableStateOf("") }
+                        var drugName by remember { mutableStateOf("") }
+                        var location by remember { mutableStateOf("") }
+                        var imageUri by remember { mutableStateOf<Uri?>(null) }
+                        var postType by remember { mutableStateOf<PostType?>(null) }
+                        var expanded by remember { mutableStateOf(false) }
+                        var showError by remember { mutableStateOf(false) }
+                        var showSuccessMessage by remember { mutableStateOf(false) }
+
+                        // استخدام ActivityResultContracts لفتح مستعرض الملفات
+                        val pickImageLauncher = rememberLauncherForActivityResult(
+                            contract = ActivityResultContracts.GetContent(),
+                            onResult = { uri ->
+                                imageUri = uri
+                                viewModel.onEvent(AddPostEvent.ImageUrlChanged(uri?.toString() ?: ""))
+                            }
+                        )
+
+
+                        // LaunchedEffect to show success message for 5 seconds
+                        LaunchedEffect(showSuccessMessage) {
+                            if (showSuccessMessage) {
+                                delay(3000) // Show the message for 3 seconds
+                                showSuccessMessage = false // Hide the message after 3 seconds
+                                navController.popBackStack()
+                            }
+                        }
+
+                        Column(
+                            modifier = Modifier
+                                .fillMaxSize()
+                                .padding(16.dp),
+                            verticalArrangement = Arrangement.spacedBy(12.dp)
+                        ) {
+                            // حقل تحميل الصورة - مستطيل
+                            Box(
+                                contentAlignment = Alignment.Center,
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .height(150.dp) // تحديد الارتفاع للمربع المستطيل
+                            ) {
+                                // إذا تم تحميل صورة، عرضها داخل المستطيل
+                                imageUri?.let {
+                                    Image(
+                                        painter = rememberImagePainter(it),
+                                        contentDescription = "Uploaded Image",
+                                        modifier = Modifier
+                                            .fillMaxSize()
+                                            .clip(RectangleShape) // جعل الصورة مستطيلة
+                                    )
+                                }
+
+                                // زر رفع الصورة يظهر فقط إذا كانت الصورة غير محمّلة
+                                if (imageUri == null) {
+                                    Button(
+                                        onClick = { pickImageLauncher.launch("image/*") },
+                                        modifier = Modifier
+                                            .fillMaxWidth()
+                                            .height(100.dp) // جعل الزر مستطيلًا أكبر
+                                            .padding(16.dp)
+                                    ) {
+                                        Text("تحميل صورة", color = Color.White) // نص الزر
+                                    }
+                                }
+                            }
+
+                            // باقي الحقول الأخرى (عنوان المنشور، المحتوى، الاسم الدوائي، إلخ...)
+                            OutlinedTextField(
+                                value = title,
+                                onValueChange = {
+                                    title = it
+                                    viewModel.onEvent(AddPostEvent.TitleChanged(it))
+                                    showError = false
+                                },
+                                label = { Text("عنوان المنشور") },
+                                modifier = Modifier.fillMaxWidth(),
+                                isError = showError && title.isEmpty()
+                            )
+
+                            OutlinedTextField(
+                                value = content,
+                                onValueChange = {
+                                    content = it
+                                    viewModel.onEvent(AddPostEvent.ContentChanged(it))
+                                    showError = false
+                                },
+                                label = { Text("محتوى المنشور") },
+                                modifier = Modifier.fillMaxWidth(),
+                                isError = showError && content.isEmpty()
+                            )
+
+                            OutlinedTextField(
+                                value = drugName,
+                                onValueChange = {
+                                    drugName = it
+                                    viewModel.onEvent(AddPostEvent.DrugNameChanged(it))
+                                    showError = false
+                                },
+                                label = { Text("اسم الدواء") },
+                                modifier = Modifier.fillMaxWidth(),
+                                isError = showError && drugName.isEmpty()
+                            )
+
+                            OutlinedTextField(
+                                value = location,
+                                onValueChange = {
+                                    location = it
+                                    viewModel.onEvent(AddPostEvent.LocationChanged(it))
+                                    showError = false
+                                },
+                                label = { Text("الموقع") },
+                                modifier = Modifier.fillMaxWidth(),
+                                isError = showError && location.isEmpty()
+                            )
+
+                            // حقل اختيار نوع المنشور
+                            Box(modifier = Modifier.fillMaxWidth()) {
+                                OutlinedTextField(
+                                    value = postType?.type ?: "",
+                                    onValueChange = {},
+                                    readOnly = true,
+                                    label = { Text("نوع المنشور") },
+                                    modifier = Modifier
+                                        .fillMaxWidth()
+                                        .clickable { expanded = true },
+                                    trailingIcon = {
+                                        Icon(
+                                            Icons.Default.ArrowDropDown,
+                                            contentDescription = null,
+                                            Modifier.clickable { expanded = true }
+                                        )
+                                    }
+                                )
+                                DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
+                                    PostType.values().forEach { type ->
+                                        DropdownMenuItem(
+                                            text = { Text(type.type) },
+                                            onClick = {
+                                                postType = type
+                                                expanded = false
+                                            }
+                                        )
+                                    }
+                                }
+                            }
+
+
+                            Column(
+                                modifier = Modifier
+                                    .fillMaxSize()
+                                    .padding(16.dp),
+                                verticalArrangement = Arrangement.spacedBy(12.dp)
+                            ) {
+
+                                Button(
+                                    onClick = {
+                                        showError = false
+
+                                        if (title.isEmpty() || content.isEmpty() || drugName.isEmpty() || location.isEmpty()) {
+                                            showError = true
+                                        } else {
+                                            viewModel.onEvent(AddPostEvent.Submit)
+                                            showSuccessMessage = true
+                                        }
+                                    },
+                                    modifier = Modifier.fillMaxWidth()
+                                ) {
+                                    Text("اضافة منشور")
+                                }
+
+
+                                // Display success message for 3 seconds with checkmark
+                                if (showSuccessMessage) {
+                                    Box(
+                                        modifier = Modifier.fillMaxWidth(),
+                                        contentAlignment = Alignment.Center
+                                    ) {
+                                        Row(
+                                            verticalAlignment = Alignment.CenterVertically,
+                                            horizontalArrangement = Arrangement.spacedBy(8.dp)
+                                        ) {
+                                            Icon(
+                                                imageVector = Icons.Filled.CheckCircle, // علامة صح
+                                                contentDescription = "Success",
+                                                tint = Color.Green
+                                            )
+                                            Text(
+                                                text = "تمت اضافة المنشور بنجاح!",
+                                                style = androidx.compose.ui.text.TextStyle(fontSize = 16.sp),
+                                                color = Color.Green
+                                            )
+                                        }
+                                    }
+                                }
+
+
+                                // Display error message if any field is missing
+                                if (showError) {
+                                    Box(
+                                        modifier = Modifier.fillMaxWidth(),
+                                        contentAlignment = Alignment.Center
+                                    ) {
+                                        Text(
+                                            text = "من فضلك املئ كل الحقول.",
+                                            color = Color.Red,
+                                            fontSize = 14.sp,
+                                            style = androidx.compose.ui.text.TextStyle(fontSize = 14.sp),
+                                            modifier = Modifier.padding(top = 8.dp))
+                                    }
+                                }
+                            }
+                        }
+                    }lChanged(uri?.toString() ?: ""))
+        }
+    )
+
+
+    // LaunchedEffect to show success message for 5 seconds
+    LaunchedEffect(showSuccessMessage) {
+        if (showSuccessMessage) {
+            delay(3000) // Show the message for 3 seconds
+            showSuccessMessage = false // Hide the message after 3 seconds
+            navController.popBackStack()
+        }
+    }
+
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .padding(16.dp),
+        verticalArrangement = Arrangement.spacedBy(12.dp)
+    ) {
+        // حقل تحميل الصورة - مستطيل
+        Box(
+            contentAlignment = Alignment.Center,
+            modifier = Modifier
+                .fillMaxWidth()
+                .height(150.dp) // تحديد الارتفاع للمربع المستطيل
+        ) {
+            // إذا تم تحميل صورة، عرضها داخل المستطيل
+            imageUri?.let {
+                Image(
+                    painter = rememberImagePainter(it),
+                    contentDescription = "Uploaded Image",
+                    modifier = Modifier
+                        .fillMaxSize()
+                        .clip(RectangleShape) // جعل الصورة مستطيلة
+                )
+            }
+
+            // زر رفع الصورة يظهر فقط إذا كانت الصورة غير محمّلة
+            if (imageUri == null) {
+                Button(
+                    onClick = { pickImageLauncher.launch("image/*") },
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .height(100.dp) // جعل الزر مستطيلًا أكبر
+                        .padding(16.dp)
+                ) {
+                    Text("تحميل صورة", color = Color.White) // نص الزر
+                }
+            }
+        }
+
+        // باقي الحقول الأخرى (عنوان المنشور، المحتوى، الاسم الدوائي، إلخ...)
+        OutlinedTextField(
+            value = title,
+            onValueChange = {
+                title = it
+                viewModel.onEvent(AddPostEvent.TitleChanged(it))
+                showError = false
+            },
+            label = { Text("عنوان المنشور") },
+            modifier = Modifier.fillMaxWidth(),
+            isError = showError && title.isEmpty()
+        )
+
+        OutlinedTextField(
+            value = content,
+            onValueChange = {
+                content = it
+                viewModel.onEvent(AddPostEvent.ContentChanged(it))
+                showError = false
+            },
+            label = { Text("محتوى المنشور") },
+            modifier = Modifier.fillMaxWidth(),
+            isError = showError && content.isEmpty()
+        )
+
+        OutlinedTextField(
+            value = drugName,
+            onValueChange = {
+                drugName = it
+                viewModel.onEvent(AddPostEvent.DrugNameChanged(it))
+                showError = false
+            },
+            label = { Text("اسم الدواء") },
+            modifier = Modifier.fillMaxWidth(),
+            isError = showError && drugName.isEmpty()
+        )
+
+        OutlinedTextField(
+            value = location,
+            onValueChange = {
+                location = it
+                viewModel.onEvent(AddPostEvent.LocationChanged(it))
+                showError = false
+            },
+            label = { Text("الموقع") },
+            modifier = Modifier.fillMaxWidth(),
+            isError = showError && location.isEmpty()
+        )
+
+        // حقل اختيار نوع المنشور
+        Box(modifier = Modifier.fillMaxWidth()) {
+            OutlinedTextField(
+                value = postType?.type ?: "",
+                onValueChange = {},
+                readOnly = true,
+                label = { Text("نوع المنشور") },
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .clickable { expanded = true },
+                trailingIcon = {
+                    Icon(
+                        Icons.Default.ArrowDropDown,
+                        contentDescription = null,
+                        Modifier.clickable { expanded = true }
+                    )
+                }
+            )
+            DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
+                PostType.values().forEach { type ->
+                    DropdownMenuItem(
+                        text = { Text(type.type) },
+                        onClick = {
+                            postType = type
+                            expanded = false
+                        }
+                    )
+                }
+            }
+        }
+
+
+        Column(
+            modifier = Modifier
+                .fillMaxSize()
+                .padding(16.dp),
+            verticalArrangement = Arrangement.spacedBy(12.dp)
+        ) {
 
+            Button(
+                onClick = {
+                    showError = false
 
-//TODO: add add post screen
\ No newline at end of file
+                    if (title.isEmpty() || content.isEmpty() || drugName.isEmpty() || location.isEmpty()) {
+                        showError = true
+                    } else {
+                        viewModel.onEvent(AddPostEvent.Submit)
+                        showSuccessMessage = true
+                    }
+                },
+                modifier = Modifier.fillMaxWidth()
+            ) {
+                Text("اضافة منشور")
+            }
+
+
+            // Display success message for 3 seconds with checkmark
+            if (showSuccessMessage) {
+                Box(
+                    modifier = Modifier.fillMaxWidth(),
+                    contentAlignment = Alignment.Center
+                ) {
+                    Row(
+                        verticalAlignment = Alignment.CenterVertically,
+                        horizontalArrangement = Arrangement.spacedBy(8.dp)
+                    ) {
+                        Icon(
+                            imageVector = Icons.Filled.CheckCircle, // علامة صح
+                            contentDescription = "Success",
+                            tint = Color.Green
+                        )
+                        Text(
+                            text = "تمت اضافة المنشور بنجاح!",
+                            style = androidx.compose.ui.text.TextStyle(fontSize = 16.sp),
+                            color = Color.Green
+                        )
+                    }
+                }
+            }
+
+
+            // Display error message if any field is missing
+            if (showError) {
+                Box(
+                    modifier = Modifier.fillMaxWidth(),
+                    contentAlignment = Alignment.Center
+                ) {
+                    Text(
+                        text = "من فضلك املئ كل الحقول.",
+                        color = Color.Red,
+                        fontSize = 14.sp,
+                        style = androidx.compose.ui.text.TextStyle(fontSize = 14.sp),
+                        modifier = Modifier.padding(top = 8.dp))
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
deleted file mode 100644
--- a/.idea/deploymentTargetSelector.xml	(revision ad99e9b9b103e8db0ff19c252298f9ca382e5a50)
+++ /dev/null	(revision ad99e9b9b103e8db0ff19c252298f9ca382e5a50)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetSelector">
-    <selectionStates>
-      <SelectionState runConfigName="app">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-    </selectionStates>
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/example/afya/ui/screens/ImageUrlChanged.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/afya/ui/screens/ImageUrlChanged.kt b/app/src/main/java/com/example/afya/ui/screens/ImageUrlChanged.kt
new file mode 100644
--- /dev/null	(date 1741906664057)
+++ b/app/src/main/java/com/example/afya/ui/screens/ImageUrlChanged.kt	(date 1741906664057)
@@ -0,0 +1,5 @@
+package com.example.afya.ui.screens
+
+class ImageUrlChanged(s: String) {
+
+}
Index: app/src/main/java/com/example/afya/presentation/AddPostEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/afya/presentation/AddPostEvent.kt b/app/src/main/java/com/example/afya/presentation/AddPostEvent.kt
new file mode 100644
--- /dev/null	(date 1741906664039)
+++ b/app/src/main/java/com/example/afya/presentation/AddPostEvent.kt	(date 1741906664039)
@@ -0,0 +1,5 @@
+package com.example.afya.presentation
+
+class AddPostEvent {
+
+}
Index: app/src/main/java/com/example/afya/presentation/AddPostViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/afya/presentation/AddPostViewModel.kt b/app/src/main/java/com/example/afya/presentation/AddPostViewModel.kt
new file mode 100644
--- /dev/null	(date 1741906664053)
+++ b/app/src/main/java/com/example/afya/presentation/AddPostViewModel.kt	(date 1741906664053)
@@ -0,0 +1,8 @@
+package com.example.afya.presentation
+
+class AddPostViewModel {
+    fun onEvent(imageUrlChanged: Any) {
+
+    }
+
+}
